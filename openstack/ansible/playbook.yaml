---
# Derived from a multi-master multi-worker setup here:
# https://gitlab.cern.ch/cms-cactus/ops/cactus-review/-/blob/master/docs/cactus-review-openstack/ansible/playbook.yaml

- hosts: all
  tasks:
  - name: disable firewalld
    systemd:
      state: stopped
      name: firewalld
      daemon_reload: no
      enabled: no

  - name: disable selinux
    selinux:
      state: disabled
    register: selinux

  - name: reboot
    reboot:
    when: selinux.changed

  - name: Install Docker yum repo
    get_url:
      url: https://download.docker.com/linux/centos/docker-ce.repo
      dest: /etc/yum.repos.d/docker-ce.repo
      mode: 0644

  - name: k8s repo
    copy:
      content: |
        [kubernetes]
        name=Kubernetes
        baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
        enabled=1
        gpgcheck=1
        repo_gpgcheck=1
        gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      dest: /etc/yum.repos.d/kubernetes.repo

  - name: install stuff
    yum:
      name: 
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - yum-utils
      - bind-utils
      - device-mapper-persistent-data
      - lvm2
      - jq
      - tc
      - "{{ ( (ansible_facts.distribution_major_version | int) < 8) | ternary('libselinux-python','python3-libselinux') }}"
      - kubelet-1.21.1
      - kubeadm-1.21.1
      - kubectl-1.21.1
      state: latest

  - name: docker config folder
    file:
      path: /etc/docker
      state: directory
      mode: '0755'
  - name: docker daemon config
    copy:
      content: |
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
            "max-size": "100m"
          },
          "storage-driver": "overlay2",
          "storage-opts": [
            "overlay2.override_kernel_check=true"
          ]
        }
      dest: /etc/docker/daemon.json

  - name: Copy using inline content
    copy:
      content: |
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
      dest: /etc/sysctl.d/k8s.conf

  - name: update kernel parameters
    shell: sysctl --system
    changed_when: false

  - name: Start docker
    systemd:
      state: started
      name: docker
      daemon_reload: yes
      enabled: yes
  - name: Enable kubelet
    systemd:
      state: started
      name: kubelet
      enabled: yes

  - name: check if joined to k8s cluster
    stat:
      path: /etc/kubernetes/kubelet.conf
    register: kube_conf_present

# check if k8s cluster is present, create it if not
- hosts: bootstrapper
  tasks:

  - name: bootstrap cluster
    when: kube_conf_present.stat.exists == false
    script: kubeadm-init.sh {{ lookup('env', 'OS_USERNAME') }}-pocketdune.cern.ch
    register: bootstrap_script
    run_once: true
  - debug: var=bootstrap_script.stdout_lines

  - name: fetch certificate key hash
    shell: kubeadm init phase upload-certs --upload-certs | tail -1
    register: certificate_key_script
    run_once: true
    changed_when: false
  - name: fetch k8s join command
    shell: kubeadm token create --print-join-command
    register: worker_join_command_script
    run_once: true
    changed_when: false

  - name: fetch kubectl config
    ansible.builtin.fetch:
      src: /etc/kubernetes/admin.conf
      dest: admin.conf

- hosts: all:!bootstrapper
  tasks:
  - name: join cluster
    when: kube_conf_present.stat.exists == false
    script: kubeadm-join.sh "{{ hostvars[groups['bootstrapper'][0]]['worker_join_command_script']['stdout'] }}" "{{ hostvars[groups['bootstrapper'][0]]['certificate_key_script']['stdout'] }}"

